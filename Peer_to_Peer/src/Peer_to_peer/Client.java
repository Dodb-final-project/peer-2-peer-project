/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Peer_to_peer;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author YOB
 */
public class Client extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form Client
     */
    private ObjectOutputStream oos;
    private ObjectInputStream ois;
    public static Socket soc;
    private Socket sock;
    private Component jpanel;
    private String Register_controller = "Register";
    private String file_path;
    private int file_size;
    public static String this_asAserver_ip;
    public static int this_asAserver_port;
    public byte[] hashedBytes;
    public static Fileserver clientserver;

    public Client() {
        try {
            sock = new Socket("127.0.0.1", 3000);
            this_asAserver_ip = InetAddress.getLocalHost().getHostAddress();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        //textarea.append("Connection Established");
        System.out.println("Connection Established");
        initComponents();
        Browse.addActionListener(this);
        Disconnect.addActionListener(this);
        Search.addActionListener(this);
        Register.addActionListener(this);
        Download.addActionListener(this);
        Disconnect.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Disconnect = new javax.swing.JButton();
        Filetxtfield = new javax.swing.JTextField();
        Browse = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        Register = new javax.swing.JButton();
        Download = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Disconnect.setText("Disconnect");
        Disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectActionPerformed(evt);
            }
        });

        Browse.setText("Browse");
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        Search.setText("List");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("Share File");

        Register.setText("Register");
        Register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterActionPerformed(evt);
            }
        });

        Download.setText("Download");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Download, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(Disconnect))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Filetxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Register, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(131, 131, 131)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Browse)
                    .addComponent(Filetxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Register)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(Search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Disconnect)
                    .addComponent(Download))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisconnectActionPerformed

    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BrowseActionPerformed

    private void RegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterActionPerformed
    private String hashFile(File file) {
        try (FileInputStream inputStream = new FileInputStream(file)) {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");

            byte[] bytesBuffer = new byte[1024];
            int bytesRead = -1;

            while ((bytesRead = inputStream.read(bytesBuffer)) != -1) {
                digest.update(bytesBuffer, 0, bytesRead);
            }

            hashedBytes = digest.digest();

        } catch (NoSuchAlgorithmException | IOException ex) {
            ex.printStackTrace();
        }
        return convertByteArrayToHexString(hashedBytes);
    }

    private static String convertByteArrayToHexString(byte[] arrayBytes) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < arrayBytes.length; i++) {
            stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)
                    .substring(1));
        }
        return stringBuffer.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        Random rand = new Random();
        this_asAserver_port = rand.nextInt(65000 - 1025) + 1025;

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
       
        clientserver = new Fileserver(this_asAserver_port);
        

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse;
    private javax.swing.JButton Disconnect;
    private javax.swing.JButton Download;
    private javax.swing.JTextField Filetxtfield;
    private javax.swing.JButton Register;
    private javax.swing.JButton Search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == Browse) {
            JFileChooser jfc = new JFileChooser();
            jfc.showOpenDialog(jpanel);
            Filetxtfield.setText(jfc.getSelectedFile().getPath());
            file_path = jfc.getSelectedFile().getAbsolutePath();
            file_size = (int) jfc.getSelectedFile().length();

        } else if (e.getSource() == Disconnect) {
            HashMap delete = new HashMap();
        } else if (e.getSource() == Register) {

            try {

                File file = new File(file_path);
                oos = new ObjectOutputStream(sock.getOutputStream());
                System.out.println(Register_controller);
                System.out.println(file_path);
                System.out.println("this is the file size"+file_size);
                System.out.println(this_asAserver_port);
                HashMap map = new HashMap();
                map.put("controller", "Please");
                map.put("file_name", file_path);
                map.put("file_size", file_size);
                map.put("port", this_asAserver_port);
                map.put("ip_address", this_asAserver_ip);
                map.put("hash", hashFile(file));

                oos.writeObject(map);
                oos.flush();
                map.clear();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (e.getSource() == Search) {

            String[] headers = {"Name", "Hash","File Size", "Ip Address", "Port"};
            Object[][] object = {{null, null, null, null}};
            DefaultTableModel model = new DefaultTableModel(object, headers);
            jTable1.setModel(model);

            //sending the controller to the server
            try {
                HashMap map = new HashMap();
                map.put("controller", "Search");
                oos = new ObjectOutputStream(sock.getOutputStream());
                oos.writeObject(map);
                oos.flush();

                ois = new ObjectInputStream(sock.getInputStream());
                HashMap sizemap = (HashMap) ois.readObject();
                int size = Integer.parseInt(sizemap.get("size").toString());
                System.out.println("What is the value of x? " + size);

                int x = 0;
                while (x < size) {
                    ois = new ObjectInputStream(sock.getInputStream());
                    HashMap input = (HashMap) ois.readObject();
                    String Name = input.get("Name").toString();
                    String Hash = input.get("Hash").toString();
                    int filesize=Integer.parseInt(input.get("size").toString());
                    String Ip = input.get("Ip").toString();
                    int Port = Integer.parseInt(input.get("Port").toString());
                    System.out.println("          File List        ");

                    System.out.println(input.size());
                    System.out.println("Name: " + Name);
                    System.out.println("Hash: " + Hash);
                    System.out.println("File Size: "+filesize);
                    System.out.println("IP ADDRESS: "+Ip);
                    System.out.println("Port: "+Port);
                    System.out.println("*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&");
                    //model.addRow(new Object[]{file_name.substring(file_name.lastIndexOf("\\") + 1), file_size1, file_type});
                    model.addRow(new Object[]{Name,Hash,filesize,Ip,Port});
                    // Thread newt=new Thread(10000);

                    input.clear();
                    x++;

                }

            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (e.getSource() == Download) {
            int row = jTable1.getSelectedRow();
            int column = jTable1.getSelectedColumn();
            String Name = (String) jTable1.getModel().getValueAt(row, 0).toString();
            String HASH = (String) jTable1.getModel().getValueAt(row, 1).toString();
            String ip = (String) jTable1.getModel().getValueAt(row, 3).toString();
            int filesize=Integer.parseInt((String) jTable1.getModel().getValueAt(row, 2).toString());
            System.out.println("tHE FILE SIZE ISSSSSS"+filesize );
            System.out.println("The ip ADDRESS IS :" + ip);
            int Port = Integer.parseInt((String) jTable1.getModel().getValueAt(row, 4).toString());

            System.out.println("The port is :" + Port);
            String value = String.valueOf(jTable1.getValueAt(row, column));

            download down = new download(Name, ip, Port, filesize);
            new Thread(down).start();

        }
        else if(e.getSource()==Disconnect){
            try {
                
                
                HashMap map = new HashMap();
                map.put("controller", "Delete");
                map.put("Ip", this_asAserver_ip);
                System.out.println("AND THIS IS THE IP ADDRESS: "+this_asAserver_ip);
                oos = new ObjectOutputStream(sock.getOutputStream());
                oos.writeObject(map);
                oos.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }
   public class list implements Runnable{

        @Override
        public void run() {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    public class download implements Runnable {

        String name;
        String ip;
        int port;
        int size;
        Socket socket;
        ObjectOutputStream yona;

        public download(String name, String ip, int Port, int size) {

            this.name = name;
            this.ip = ip;
            this.port = Port;
            this.size = size;
        }

        @Override
        public void run() {
            receivefile(name, ip, port, size);
        }

        public void receivefile(String filename, String ipaddress, int port, int filesize) {

            System.out.println("The ippppppppppppppp+" + ipaddress);
            System.out.println("The ippppppppppppppp+" + port);
            System.out.println("The file size issssssssss" + filesize);

            try {
                socket = new Socket(ipaddress, port);
                yona = new ObjectOutputStream(socket.getOutputStream());
                HashMap map = new HashMap();
                map.put("Name", filename);

                yona.writeObject(map);
                yona.flush();

                int bytesRead;
                int currentTot = 0;
                byte[] bytearray = new byte[filesize];
                InputStream is = socket.getInputStream();
                FileOutputStream fos = new FileOutputStream("C:\\Downloads\\new\\"+filename);
                BufferedOutputStream bos = new BufferedOutputStream(fos);
                bytesRead = is.read(bytearray, 0, bytearray.length);
                currentTot = bytesRead;

                do {
                    bytesRead
                            = is.read(bytearray, currentTot, (bytearray.length - currentTot));
                    if (bytesRead >= 0) {
                        currentTot += bytesRead;
                    }
                } while (bytesRead > -1);

                bos.write(bytearray, 0, currentTot);
                bos.flush();
                bos.close();
                socket.close();

            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

}
